@using System.Globalization
@inject IStringLocalizer<FeaturedProductsSlider> localizer

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<div class="featured-products-panel bg-light">
    @if (isLoading)
    {

        <h2>@localizer["ProductsLoadingStatusLoadingProducts"]</h2>
        <br />
        <br />
        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;"></div>
        </div>
    }
    else if (featuredProducts.Count == 0)
    {
        <p>@localizer["ProductsLoadingStatusNoFeaturedProductsAvailable"]</p>
    }
    else
    {

        <h2>@localizer["ProductSliderTitleFeaturedProducts"]</h2>
        <br />
        <div class="swiper-container featured-products-slider">
            <div class="swiper-wrapper">
                @foreach (var product in featuredProducts)
                {
                    <div class="swiper-slide" @key="product.Id">
                        <a href="/products?productId=@(product.Id)" class="product-card">
                            <img src="@product.ImagePath" class="card-img-top product-image" alt="@product.Name">
                            <div class="card-body text-center">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text">@string.Format(localizer["ProductCardCaptionPrice"].Value.Replace("{price}", product.UnitPrice.ToString()))</p>
                            </div>
                        </a>
                    </div>
                }
            </div>
            <!-- Swiper navigation buttons -->
            <div class="swiper-button-prev"></div>
            <div class="swiper-button-next"></div>
            <!-- Swiper pagination -->
            <div class="swiper-pagination"></div>
        </div>
    }
</div>

@code {
    private List<ProductModel> featuredProducts = new();
    private bool isLoading = true;
    private bool isInitialized = false;
    private string? apiBaseUrl;

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];

        if (string.IsNullOrEmpty(apiBaseUrl))
        {
            Console.WriteLine("API Base URL is not configured.");
            return;
        }

        try
        {
            featuredProducts = await httpClient.GetFromJsonAsync<List<ProductModel>>($"{apiBaseUrl}/api/featuredProducts");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized && !isLoading)
        {
            isInitialized = true; // Prevent multiple calls
            await JSRuntime.InvokeVoidAsync("App.Pages.HomePage.init");
        }
    }

    public class ProductModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string ImagePath { get; set; }
        public decimal UnitPrice { get; set; }
    }
}

