@page "/featured-products"
@using System.Globalization

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

@if (isLoading)
{
    <p>Loading featured products...</p>
}
else if (featuredProducts.Count == 0)
{
    <p>No featured products available.</p>
}
else
{
    <div class="swiper-container featured-products-slider">
        <div class="swiper-wrapper">
            @foreach (var product in featuredProducts)
            {
                <div class="swiper-slide product-card" @key="product.Id">
                    <div class="card">
                        <img src="@product.ImagePath" class="card-img-top product-image" alt="@product.Name">
                        <div class="card-body text-center">
                            <h5 class="card-title">@product.Name</h5>
                            <p class="card-text">Price: @product.UnitPrice.ToString("C")</p>
                        </div>
                    </div>
                </div>
            }
        </div>
        <!-- Swiper navigation buttons -->
        <div class="swiper-button-prev"></div>
        <div class="swiper-button-next"></div>
        <!-- Swiper pagination -->
        <div class="swiper-pagination"></div>
    </div>
}

@code {
    private List<ProductModel> featuredProducts = new();
    private bool isLoading = true;
    private bool isInitialized = false;
    private string? apiBaseUrl;

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];

        if (string.IsNullOrEmpty(apiBaseUrl))
        {
            Console.WriteLine("API Base URL is not configured.");
            return;
        }

        try
        {
            featuredProducts = await httpClient.GetFromJsonAsync<List<ProductModel>>($"{apiBaseUrl}/api/featuredProducts");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized && !isLoading)
        {
            isInitialized = true; // Prevent multiple calls
            await JSRuntime.InvokeVoidAsync("App.Pages.HomePage.init");
        }
    }

    public class ProductModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string ImagePath { get; set; }
        public decimal UnitPrice { get; set; }
    }
}

