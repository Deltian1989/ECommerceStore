@inject IStringLocalizer<ProductsSlider> localizer
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

@foreach (var product in featuredProducts)
{
    <div class="swiper-slide" @key="product.Id">
        <a href="/products?productId=@(product.Id)" class="product-card">
            <img src="@product.ImagePath" class="card-img-top product-image" alt="@product.Name">
            <div class="card-body text-center">
                <h5 class="card-title">@product.Name</h5>
                <p class="card-text">@string.Format(localizer["ProductCardCaptionPrice"].Value.Replace("{price}", product.UnitPrice.ToString()))</p>
            </div>
        </a>
    </div>
}

@code {
    [Parameter] public EventCallback<ValueTuple<bool, bool, bool>> OnValueChanged { get; set; }

    private List<FeaturedProductModel> featuredProducts = new();

    private bool isLoading = true;
    private bool isInitialized = false;
    private string? apiBaseUrl;

    protected override async Task OnInitializedAsync()
    {
        apiBaseUrl = Configuration["ApiBaseUrl"];

        if (string.IsNullOrEmpty(apiBaseUrl))
        {
            Console.WriteLine("API Base URL is not configured.");
            return;
        }

        try
        {
            featuredProducts = await httpClient.GetFromJsonAsync<List<FeaturedProductModel>>($"{apiBaseUrl}/api/featuredProducts");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            await OnValueChanged.InvokeAsync((isLoading, isInitialized, featuredProducts.Count > 0));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized && !isLoading)
        {
            isInitialized = true; // Prevent multiple calls
            await JSRuntime.InvokeVoidAsync("App.Pages.HomePage.init");
        }
    }
}
